@page "/login"
@using FlowerStore.Web.Models.Auth;
@using FlowerStore.Web.Services.Auth;
@using FlowerStore.Web.Services.User;
@layout SimpleLayout
@inject IAuthService AuthService
@inject IUserService UserService
@inject NavigationManager NavigationManager


@if (registerPage)
{
 <PageTitle>Register</PageTitle>
<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <Microsoft.AspNetCore.Components.Forms.EditForm Model="@regModel" OnValidSubmit="OnRegister">
                <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />

                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Register</MudText>

                <MudAlert Severity="_severity" Class="@(ShowErrors ? "mb-3 d-block" : "d-none")">
                    @Error
                    <br />
                    @ErrorDetail
                </MudAlert>

                <MudTextField T="string" AutoFocus="true"
                                @bind-Value="regModel.Name" For="@(() => regModel.Name)"
                                Label="User name" 
                                HelperText="Enter user name"/>
                <MudTextField T="string"
                                @bind-Value="regModel.Email" For="@(() => regModel.Email)"
                                Label="Email" 
                                HelperText="Enter user email"/>
                <MudTextField @bind-Value="regModel.Password" For="@(() => regModel.Password)"
                                Label="Password" 
                                HelperText="Enter password"
                                InputType="@InputType.Password"
                                Adornment="Adornment.End"/>
                <MudTextField @bind-Value="regModel.ConfirmPassword" For="@(() => regModel.ConfirmPassword)"
                                Label="Confirm Password" 
                                HelperText="Confirm password"
                                InputType="@InputType.Password"
                                Adornment="Adornment.End"/>
                
                <MudStack Row AlignItems="AlignItems.Center" Class="mt-12">
                    <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit">Register</MudButton>
                    <MudLink OnClick="() => { registerPage = false; ShowErrors = false; }" Class="mx-5">Login</MudLink>
                </MudStack>
                
            </Microsoft.AspNetCore.Components.Forms.EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>   
}
else
{
<PageTitle>Login</PageTitle>
<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <Microsoft.AspNetCore.Components.Forms.EditForm Model="@model" OnValidSubmit="OnLogin">
                <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />

                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Sign In</MudText>

                <MudAlert Severity="Severity.Error" Class="@(ShowErrors ? "mb-3 d-block" : "d-none")">
                    @Error
                    <br />
                    @ErrorDetail
                </MudAlert>

                <MudTextField T="string" AutoFocus="true"
                                @bind-Value="model.UserName" For="@(() => model.UserName)"
                                Label="User name" 
                                HelperText="Enter user name"/>
                <MudTextField @bind-Value="model.Password" For="@(() => model.Password)"
                                Label="Password" 
                                HelperText="Enter password"
                                InputType="@InputType.Password"
                                Adornment="Adornment.End"/>

                <MudStack Row AlignItems="AlignItems.Center" Class="mt-12">
                    <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit">Sign In</MudButton>
                    <MudLink OnClick="() => { registerPage = true; ShowErrors = false; }" Class="mx-5">Register</MudLink>
                </MudStack>

                
            </Microsoft.AspNetCore.Components.Forms.EditForm>
        </MudPaper>
    </MudItem>

</MudGrid>
}

@code {
    bool registerPage = false;
    string userName = "";
    string password = "";
    bool rememberMe = false;

    private RegisterUserModel regModel = new();


    private Severity _severity = Severity.Error;
    private bool ShowErrors;
    private string? Error;
    private string? ErrorDetail;

    private LoginModel model = new();

    async Task OnLogin()
    {
        ShowErrors = false;
        Error = "";
        ErrorDetail = "";

        var result = await AuthService.Login(model.UserName!, model.Password!);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            Error = result.Error;
            ErrorDetail = result.Message;
            ShowErrors = true;
        }
    }

    async Task OnRegister()
    {
        try
        {
            await UserService.RegisterAsync(regModel);
            _severity = Severity.Success;
            ShowErrors = true;
            Error = "Register user success!";
            ErrorDetail = "Returning to login after 5 seconds";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(5000);
            ShowErrors = false;
            registerPage = false;
        }
        catch (HttpRequestException ex)
        {
            ShowErrors = true;
            Error = ex.Message;
            ErrorDetail = ex.InnerException?.Message;
            _severity = Severity.Error;
        }
        catch (Exception ex)
        {
            ShowErrors = true;
            Error = ex.Message;
            ErrorDetail = ex.InnerException?.Message;
            _severity = Severity.Error;
        }
    }

    void OnResetPassword(string value, string name)
    {
    }
}
